/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'juergens' at '29.06.15 19:18' with Gradle 2.2
 *
 * This generated file contains a commented-out org.drip.sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.2/userguide/tutorial_java_projects.html
 */


// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: "jdepend"
apply plugin: "jacoco"
apply plugin: 'maven-publish'

compileJava {
    options.encoding = 'windows-1250'
    //options.compilerArgs << '-Xdiags:verbose'
    options.bootClasspath = "$JDK7_HOME/jre/lib/rt.jar"
}

model {
    tasks.generatePomFileForMavenCustomPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
}

archivesBaseName    = 'DRIP-CreditAnalytics'
group               = 'org.drip'

version             = '2.4-SNAPSHOT'

targetCompatibility = JavaVersion.VERSION_1_6
sourceCompatibility = JavaVersion.VERSION_1_6


// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

sourceSets {
    integrationTest {
        java {
            srcDir 'src/integration-test/java'
        }
        resources {
            srcDir 'src/integration-test/resources'
        }
        compileClasspath = sourceSets.main.output + configurations.integrationTestCompile
        runtimeClasspath = output + compileClasspath
        compileClasspath += sourceSets.test.compileClasspath
        runtimeClasspath += sourceSets.test.runtimeClasspath
    }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.12'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'org.testng:testng:6.1.1'
    integrationTestCompile 'org.testng:testng:6.1.1'
    integrationTestCompile 'org.assertj:assertj-core:3.0.0'
    testRuntime fileTree(dir: 'libs', include: ['ojdbc14.jar'])
    testRuntime files('libs/ojdbc14.jar')
    testCompile 'org.apache.commons:commons-lang3:3.4'
    testRuntime 'org.slf4j:slf4j-simple:1.7.12'
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

test {
    // enable TestNG support (default is JUnit)
    useTestNG()
}

jacoco {
    toolVersion = "0.7.1.201405082137"
    reportsDir = file("$buildDir/customJacocoReportDir")
}
jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}

publishing {
    publications {
        mavenCustom(MavenPublication) {
            pom.withXml {
                asNode().appendNode('description',
                        'CreditAnalytics and CreditProduct are part of CreditSuite' +
                                'open suite analytics and' +
                                'trading/valuation system for credit products.')
            }
        }
    }
    repositories {
        maven {
            // change to point to your repo, e.g. http://my.org/repo
            url "$buildDir/repo"
        }
    }
}
